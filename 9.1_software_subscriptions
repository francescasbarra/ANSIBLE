# AUTOMATING LINUX ADMINISTRATION TASK

Automate common Linux system administration tasks with Ansible.

# Managing Software and Subscriptions

# Managing Packages with Ansible

'ansible.builtin.dnf' per gestire operazioni sui pacchetti

tasks:
    - name: Install the httpd packages
      ansible.builtin.dnf:
        name: httpd    
        state: present 


The 'state' keyword indicates the expected state of the package on the managed host:

'present' Ansible installs the package if it is not already installed. # (dnf install)

'absent' Ansible removes the package if it is installed. # (dnf remove)

'latest' Ansible updates the package if it is not already at the most recent available version. If the package is not installed, Ansible installs it. # (dnf upgrade)


note
you must prefix 'group names with the at sign (@)'. Remember that you can retrieve the list of groups with the dnf group list command.

ansible.builtin.dnf:
    name: '@Development Tools' 
    state: present


# ansible-navigator doc ansible.builtin.dnf command for additional parameters and playbook examples. (così in modalità interattiva, aggiungere -m stdout)
'ansible-navigator doc -m stdout ansible.builtin.dnf'

-------------------------------

# Optimizing Multiple Package Installation

tasks:
    - name: Install the packages
      ansible.builtin.dnf:
        name:
          - httpd
          - mod_ssl
          - httpd-tools
        state: present


With this syntax, Ansible installs the packages in a single DNF transaction. This is equivalent to running the dnf install httpd mod_ssl httpd-tools command.

# A commonly seen but less efficient and slower version of this task is to use a loop.
Avoid using this method because it requires the module to perform three individual transactions; one for each package.

tasks:
    - name: Install the packages
      ansible.builtin.dnf:
        name: "{{ item }}""
        state: present
      loop:
        - httpd
        - mod_ssl
        - httpd-tools

----------------------

# Gathering Facts about Installed Packages


'ansible.builtin.package_facts' collects the installed package details on managed host
It sets the 'ansible_facts['packages']' variable with the package details.


- name: Gather Package Facts
      ansible.builtin.package_facts:
        manager: auto

# il parametro manager: auto indica di scegliere in automatico il gestore dei pacchetti + adatto in base al sistema operativo

-----------------------

# Reviewing Alternative Modules to Manage Packages

For other package managers, Ansible usually provides a dedicated module. 

The 'ansible.builtin.apt' module uses the APT package tool available on Debian and Ubuntu. 
The 'ansible.windows.win_package' module can install software on Microsoft Windows systems.


the generic 'ansible.builtin.package' module automatically detects and uses the package manager available on the managed hosts

- name: Install the required packages on the web servers
  hosts: webservers
  tasks:
    - name: Install httpd
      ansible.builtin.package:
        name: httpd
        state: present

However, the ansible.builtin.package module does not support all the features that the more specialized modules provide.


----------------

note
Also, operating systems often have different names for the packages they provide. For example, the package that installs the Apache HTTP Server is httpd on Red Hat Enterprise Linux and apache2 on Ubuntu.

In that situation, you still need a conditional for selecting the correct package name depending on the operating system of the managed host.

----------------

# Registering and Managing Systems with Red Hat Subscription Management

You can entitle your Red Hat Enterprise Linux systems to product subscriptions by using a few different methods:

- 'subscription-manager' command
- 'rhel-system-roles.rhc role' available from the rhel-system-roles 'RPM'
- 'rhel_system_roles.rhc role' from the redhat.rhel_system_roles 'collection'


# Managing Red Hat Subscription Management from the Command Line

note
registrare un sistema serve a collegare il tuo sistema Red Hat ai servizi di Red Hat, in particolare a:
# Accedere agli aggiornamenti software e alle patch di sicurezza
Senza registrazione, il sistema non può scaricare aggiornamenti tramite dnf dai repository ufficiali di Red Hat.
# Abilitare e gestire i repository Red Hat
Dopo la registrazione, puoi abilitare repository specifici come quelli per RHEL, Ansible, container tools, ecc.
# Ricevere supporto tecnico
Un sistema registrato può essere tracciato nel tuo account cliente Red Hat e associato a un contratto di supporto.
# Utilizzare i contenuti ufficiali di Red Hat Subscription Management (RHSM)
RHSM tiene traccia di quali sistemi stanno usando quali sottoscrizioni.

----------


Without Ansible, you can use the 'subscription-manager command' to register a system:

[user@host ~]$ 'sudo subscription-manager register'
Registering to: subscription.rhsm.redhat.com:443/subscription
Username: yourusername
Password: yourpassword
...output omitted...

-------


'sudo subscription-manager list --available' elenca pool (licenza/abbonamento) disponibile nell'account

[user@host ~]$ 'sudo subscription-manager attach --pool=poolID'

attivazione del pool, associa automaticamente una sottoscrizione disponibile al sistema.

# dopo la registrazione del sistema si possono abilitare i software repository di Red Hat 
- 'sudo subscription-manager repos --list' per elencare i repositories disponibili


- 'sudo subscription-manager repos \
> --enable "rhel-9-for-x86_64-baseos-rpms" \
> --enable "rhel-9-for-x86_64-appstream-rpms"'  per abilitare i repositories


# (oppure si possono abilitare dal file rei repo /etc/yum.repos.d/... enable=1/0)


# Managing Red Hat Subscription Management by Using a Role

Whether you use the rhel-system-roles.rhc role from the rhel-system-roles RPM or the redhat.rhel_system_roles.rhc role from the redhat.rhel_system_roles collection, the steps for managing Red Hat subscription management are essentially the same.

# 1 Create a play that includes the desired role:

---
- name: Register systems
  hosts: all
  become: true
  tasks:
    - name: Include the rhc role
      ansible.builtin.include_role:
        name: redhat.rhel_system_roles.rhc

# 2 Define variables for the role. You might define these variables in the play, in a group_vars directory, in a host_vars directory, or in a separate variable file:

---
rhc_state: present 
rhc_auth: 
  login:
    username: yourusername
    password: yourpassword
rhc_insights: 
  state: present
rhc_repositories: 
  - name: rhel-9-for-x86_64-baseos-rpms
    state: enabled
  - name: rhel-9-for-x86_64-appstream-rpms
    state: enabled



---------------

# Configuring an RPM Package Repository

'ansible.builtin.yum_repository' To enable support for a third-party Yum repository on a managed host

# Declaring an RPM Package Repository

---
- name: Configure the company YUM/DNF repositories
  hosts: servera.lab.example.com
  tasks:
    - name: Ensure Example Repo exists
      ansible.builtin.yum_repository:
        file: example   
        name: example-internal
        description: Example Inc. Internal YUM/DNF repo
        baseurl: http://materials.example.com/yum/repository/
        enabled: true
        gpgcheck: true   
        state: present  

----------

# Importing an RPM GPG Key

# Le chiavi GPG servono a verificare che i pacchetti non siano stati manomessi

when in 'ansible.builtin.yum_repository' 
gpgcheck=true you need to install GPG key on the hosts
(per verificare la firma dei pacchetti con GPG)

- 'se gpg è attivo'si deve installare la chiave gpg sull host, se non si fa non si può verificare la firma dei pacchetti e dà errore 

#per installare la chiave gpg si usa
'ansible.builtin.rpm_key' deploys the GPG public key hosted on a remote web server to the servera.lab.example.com managed host.
'(distribuisce sui managed hosts la chiave pubblica gpg ospitata su un server remoto)'
---
- name: Configure the company YUM/DNF repositories
  hosts: servera.lab.example.com
  tasks:
    - name: Deploy the GPG public key
      ansible.builtin.rpm_key:
        key: http://materials.example.com/yum/repository/RPM-GPG-KEY-example
        state: present

    - name: Ensure Example Repo exists
      ansible.builtin.yum_repository:
        file: example
        name: example-internal
        description: Example Inc. Internal YUM/DNF repo
        baseurl: http://materials.example.com/yum/repository/
        enabled: true
        gpgcheck: true
        state: present





