# HANDLING TASK FAILURE

# Managing Task Errors in Plays

Ansible valuta il codice di ritorno di ogni task per determinare se l'attività è riuscita o meno. 
'Normalmente, quando un task fallisce, Ansible salta immediatamente tutti i task successivi.'

A volte potrebbe essere necessario che l'esecuzione vada avanti anche se dei task falliscono.

# Ignoring Task Failure

'ignore_errors'
da inserire nel task

- name: Latest version of notapkg is installed
  ansible.builtin.dnf:
    name: notapkg
    state: latest
# ignore_errors: true

------------

# Forcing Execution of Handlers After Task Failure
normalmente quando un task fallisce, gli handlers associati non vanno in esecuzione
ma se si aggiunge 'force_handlers: true' nel play vengono eseguiti 

important se è impostato 'ignore_errors: true' ma c è anche 'force_handlers: false'
il play continua l'esecuzione


#ESEMPI

# The following snippet shows how to use the force_handlers keyword in a play to force execution of the notified handler even if a subsequent task fails:

---
- hosts: all
 'force_handlers: true'
  tasks:
    - name: a task which always notifies its handler
      ansible.builtin.command: /bin/true
      notify: restart the database

    - name: a task which fails because the package doesn't exist
      ansible.builtin.dnf:
        name: notapkg
        state: latest

 'handlers:'
    - name: restart the database
      ansible.builtin.service:
        name: mariadb
        state: restarted


important 
# Handlers are special tasks that execute at the end of the play if notified by other tasks.
# Handlers are only notified when a task reports that it changed something on a managed host.
#
#
------------------

Important
Remember that handlers are notified when a task reports a changed result but are not notified when it reports an ok or failed result.

If you set force_handlers: true on the play, then any handlers that have been notified are run even if a later task failure causes the play to fail. Otherwise, handlers are not run at all when a play fails.

Setting force_handlers: true on a play does not cause handlers to be notified for tasks that report ok or failed; it only causes the handlers to run that have already been notified before the point at which the play failed.


------------------

# SPECIFING TASK FAILURE CONDITIONS (condizioni di errore)

'failed_when' 

'changed_when'


# FAILED_WHEN
specifica quali condizioni indicano che il task è fallito

tasks:
  - name: Run user creation script
    ansible.builtin.shell: /usr/local/bin/create_users.sh
    register: command_result
    failed_when: "'Password missing' in command_result.stdout"


# ansible.builtin.fail
può anche essere utilizzato per forzare il fallimento di un'attività. In alternativa, è possibile scrivere l esempio come due attività:

tasks:
  - name: Run user creation script
    ansible.builtin.shell: /usr/local/bin/create_users.sh
    register: command_result
    ignore_errors: true

  - name: Report script failure
    ansible.builtin.fail:
      msg: "The password is missing in the output"
    when: "'Password missing' in command_result.stdout"


You can use the ansible.builtin.fail module to provide a clear failure message for the task. This approach also enables delayed failure, which means that you can run intermediate tasks to complete or roll back other changes.

------------------------

# Specifying When a Task Reports "Changed" Results (segnalazione risultati modificati)


Quando un task apporta una modifica a un host, segnala lo stato 'changed' e invia la modifica agli 'handlers'
Quando il task non necessita di modifiche segnala 'ok' e non invia notifiva agli handlers

per controllare il modo in cui un'attività segnala di aver apportato modifiche all'host gestito.

It normally would always report changed when it runs. To suppress that change report, changed_when: false is set so that it only reports ok or failed.

 - name: Validate httpd configuration
    ansible.builtin.command: httpd -t
    changed_when: false
    register: httpd_config_status

# The following example uses the ansible.builtin.shell module and only reports changed if the string "Success" is found in the output of the registered variable. If it does report changed, then it notifies the handler.

tasks:
  - ansible.builtin.shell:
      cmd: /usr/local/bin/upgrade-database
    register: command_result
    changed_when: "'Success' in command_result.stdout"
    notify:
      - restart_database

handlers:
  - name: restart_database
     ansible.builtin.service:
       name: mariadb
       state: restarted




------------
# Ansible Blocks and Error Handling
#
# BLOCK / RESCUE
se i task nel 'block' falliscono, entrano in gioco i task in 'rescue'


'RESCUE' viene eseguito solo quando fallisce il blocco dei task principale



# BLOCK
nei playbook i 'blocchi' sono clausole che raggruppano logicamente tasks e possono controllarne l'esecuzione.
'I blocchi vengono utilizzati per raggruppare i task come una unità e per eseguire altri task a seconda che tutte le attività nel blocco abbiano esito positivo.'


es. un blocco può contenere la parola chiave 'when' per applicare la condizione a + task

- name: block example
  hosts: all
  tasks:
    - name: installing and configuring DNF versionlock plugin
      block:
      - name: package needed by dnf
        ansible.builtin.dnf:
          name: python3-dnf-plugin-versionlock
          state: present
      - name: lock version of tzdata
        ansible.builtin.lineinfile:
          dest: /etc/yum/pluginconf.d/versionlock.list
          line: tzdata-2016j-1
          state: present
      when: ansible_distribution == "RedHat"

----------------------




Tasks can be configured to handle error conditions by ignoring task failure, forcing handlers to be called even if the task failed, marking a task as failed when it succeeded, or overriding the behavior that causes a task to be marked as changed.



The when condition on a block clause also applies to its rescue and always clauses if present.
