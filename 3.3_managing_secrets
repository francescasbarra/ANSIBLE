# MANAGING SECRETS

Encrypt sensitive variables by using Ansible Vault, and run playbooks that reference Vault-encrypted variable files.

# Crittografare le variabili sensibili utilizzando "Ansible Vault" ed eseguire playbook che fanno riferimento ai file delle variabili crittografate da Vault

# ANSIBLE VAULT

alcuni file contengono dati/variabili sensibili che non dovrebbero essere salvati in file di testo semplici

si usa quindi una funzionalit√† di ansible #ansible-vault che serve a crittografare/decrittografare (encrypt/decrypt) i file di dati usati da ansible


# ansible-vault
to create, edit, encrypt, decrypt and view files, encrypt a string and rekey a vault encrypted file

# ansible-vault --help

# ansible-vault create nome.file
to create a new vault encrypted file


--------------

# Creating an Encrypted File

# [student@demo ~]$ ansible-vault create secret.yml
New Vault password: redhat
Confirm New Vault password: redhat

Instead of entering the Vault password through standard input, you can use a Vault password file to store the Vault password. You need to carefully protect this file using file permissions and other means.

# ansible-vault create --vault-password-file=vault-pass secret.yml

---------------

# Viewing an Encrypted File
to view an Ansible Vault-encrypted file without opening it for editing.

# [student@demo ~]$ ansible-vault view secret1.yml
Vault password: secret
my_secret: "yJJvPqhsiusmmPPZdnjndkdnYNDjdj782meUZcw"

----------------

# Editing an Existing Encrypted File
This command decrypts the file to a temporary file and allows you to edit it. When saved, it copies the content and removes the temporary file.

# [student@demo ~]$ ansible-vault edit secret.yml
Vault password: redhat

------------------

# Encrypting an Existing File
 This command can take the names of multiple files to be encrypted as arguments.

# [student@demo ~]$ ansible-vault encrypt secret1.yml secret2.yml
New Vault password: redhat
Confirm New Vault password: redhat
Encryption successful


Use the --output=OUTPUT_FILE option to save the encrypted file with a new name. You can only use one input file with the --output option
---------------------


# Decrypting an Existing File
An existing encrypted file can be permanently decrypted by using the ansible-vault decrypt filename command. When decrypting a single file, you can use the --output option to save the decrypted file under a different name.

# [student@demo ~]$ ansible-vault decrypt secret1.yml --output=secret1-decrypted.yml
Vault password: redhat
Decryption successful


------------------------

# Changing the Password of an Encrypted File
You can use the ansible-vault rekey filename command to change the password of an encrypted file. This command can rekey multiple data files at the same time. It prompts for the original password and then the new password.


# [student@demo ~]$ ansible-vault rekey secret.yml
Vault password: redhat
New Vault password: RedHat
Confirm New Vault password: RedHat
Rekey successful

---------------------------

When using a Vault password file, use the --new-vault-password-file option:

[student@demo ~]$ ansible-vault rekey --new-vault-password-file=NEW_VAULT_PASSWORD_FILE secret.yml

------------------------

# PLAYBOOK AND ANSIBLE VAULT
To run a playbook that accesses files encrypted with Ansible Vault, you need to provide the encryption password to the ansible-navigator command. If you do not provide the password, the playbook returns an error:

[student@demo ~]$ ansible-navigator run -m stdout test-secret.yml
ERROR! Attempting to decrypt but no vault secrets found

#You can provide the Vault password using one of the following options:

"Prompt interactively"

"Specify the Vault password file"

"Use the ANSIBLE_VAULT_PASSWORD_FILE environment variable"

To provide the Vault password interactively, use --playbook-artifact-enable false (or --pae false) and --vault-id @prompt as illustrated in the following example:

# [student@demo ~]$ ansible-navigator run -m stdout --pae false site.yml  --vault-id @prompt
Vault password (default): redhat

-----------------------

Important
You must disable playbook artifacts to enter the Vault password interactively. The ansible-navigator command hangs if it needs to prompt you for an interactive Vault password and playbook artifacts are not disabled. Playbook artifacts are enabled by default.

-----------------------

#  "playbook artifacts" sono i file generati o utilizzati durante l'esecuzione di un playbook Ansible. Possono includere:

File di log dell'esecuzione

File di output JSON o YAML

File di report o stato delle modifiche

Eventuali file temporanei o di cache

Risultati salvati con register e poi esportati

Sono utili per il debug, la documentazione o per riutilizzare i dati in altre esecuzioni.


---------------------

# You can use the ansible-navigator --pae false command to disable playbook artifacts.

The following minimal ansible-navigator.yml file disables playbook artifacts:

ansible-navigator:
  playbook-artifact:
    enable: false

---------------------


