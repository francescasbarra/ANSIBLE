# Deploying Custom Files with Jinja2 Templates

# Templating Files

la collection 'ansible.builtin' fornisce molti moduli che possono essere usati per modificare file esistenti.
es. lineinfile e blockinfile, ma non sempre sono facili da usare in modo efficace e corretto

Un modo molto più efficace per gestire i file è quello di creare modelli 'templates'
Con questo metodo, è possibile scrivere un file di configurazione template che viene personalizzato automaticamente per l'host al momento del deployment del file, utilizzando variabili ed Ansible facts
in questo modo è più facile controllare ed è meno soggetto ad errori 

# Introduction to Jinja2

Ansible usa il sistema di 'template Jinja2' per i file template,
usa anche la sintassi Jinja2 per fare riferimento alle var nei playbook

# Using Delimiters
'DELIMITER' variabili ed espressioni logiche sono inserite tra i tag o delimiters (delimitatori).

Quando viene valutato un modello Jinja2, l espressione '{{ EXPR }}' viene sostituita con i risultati di tale espressione o variabile.
'{% EXPR %}' per strutture di controllo speciali o logica che esegue cicli sul codice Jinja2 o esegue test
'{# COMMENT #}' per includere commenti che non devono apparire nel file finale

In the following example of a Jinja2 template file, the first line includes a comment that is not included in the final file. The variable references in the second line are replaced with the values of the system facts being referenced.

{# /etc/hosts line #}  #commento
{{ ansible_facts['default_ipv4']['address'] }}    {{ ansible_facts['hostname'] }}

------

# Building a Jinja2 Template

'Template Jinja2' composto da + elementi:
dati
variabili
espressioni

# Questi elementi vengono sostituiti con i rispettivi valori durante il rendering del template
Le variabili usate nel template possono essere specificate nella sezione 'vars' del playbook.
Si possono usare i 'facts' degli hosts come variabili del template.

I 'template files' sono solitamente salvati nella directory 'templates' del progetto del playbook con estensione '.j2'
L'estensione non è obbligatoria ma aiuta a riconoscere e trovare + facilmente i file templates.

# L'esempio seguente mostra come creare un modello per /etc/ssh/sshd_config con variabili e dati recuperati da Ansible dagli host  
Quando il template viene deployato dal play tutti i facts sono sostituiti dai valori rispettivi dell'host gestito in fase di configurazione.

# {{ ansible_managed }}
# DO NOT MAKE LOCAL MODIFICATIONS TO THIS FILE BECAUSE THEY WILL BE LOST

Port {{ ssh_port }}
ListenAddress {{ ansible_facts['default_ipv4']['address'] }}

HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

SyslogFacility AUTHPRIV

PermitRootLogin {{ root_allowed }}
AllowGroups {{ groups_allowed }}

AuthorizedKeysFile /etc/.rht_authorized_keys .ssh/authorized_keys

PasswordAuthentication {{ passwords_allowed }}

ChallengeResponseAuthentication no

...output omitted...


------------

# Deploying Jinja2 Templates


'ansible.builtin.template' 
jinja2 templates sono un importante strumento per personalizzare file di config da deployare sugli hosts
quando viene creato un template per file di config viene deployato sugli hosts con il modulo 'ansible.builtin.template' che supporta il trasferimento del file

tasks:
  - name: template render
    ansible.builtin.template:
      src: /tmp/j2-template.j2
      dest: /tmp/dest-config-file.txt


-----------------

# Managing Templated Files

Per evitare che altri amministratori di sistema modifichino i file gestiti da Ansible, è buona norma includere un commento nella parte superiore del modello per indicare che il file non deve essere modificato manualmente.

per farlo si usa la stringa ansible managed nella direttiva ansible_managed
'ansible_managed = Ansible managed' # nel file ansible_cfg
non è una var normale ma può essere usata come tale in un template

per includere questa stringa in un file jinja2 usare 
'{{ ansible_managed }}'

-----------------

# Control Structures

You can use Jinja2 control structures in template files to reduce repetitive typing, to enter entries for each host in a play dynamically, or conditionally insert text into a file.

# USING LOOPS

Jinja2 usa l istruzione 'for' come loop

{% for user in users %}
      {{ user }}
{% endfor %}


esempio

{# for statement #}
{% for myuser in users if not myuser == "root" %}
User number {{ loop.index }} - {{ myuser }}
{% endfor %}


The loop.index variable expands to the index number that the loop is currently on. It has a value of 1 the first time the loop executes, and it increments by 1 through each iteration.
 

{% for myhost in groups['myhosts'] %}
{{ myhost }}
{% endfor %}



-----------------



For a more practical example, you can use this example to generate an /etc/hosts file from host facts dynamically. Assume that you have the following playbook:

- name: /etc/hosts is up to date
  hosts: all
  gather_facts: true
  tasks:
    - name: Deploy /etc/hosts
      ansible.builtin.template:
        src: templates/hosts.j2
        dest: /etc/hosts


-----------------

# Using Conditionals

In the following example, the value of the result variable is placed in the deployed file only if the value of the finished variable is True.

{% if finished %}
{{ result }}
{% endif %}


# altrimenti
# {% elif condizione}
  ....
# {% endif %}



-------------------

# Variable Filters  

Jinja fornisce filtri che modificano il formato dell'output delle espressioni del template convertendo i dati in una variabile in altro formato nel file che risulta dal template

es. filtri per linguaggi come YAML e JSON
'to_json' formatta l'output dell'espressione usando JSON
'to_yaml' formatta output usando YAML

{{ output | to_json }}
{{ output | to_yaml }}

-----------------------------

{{ output | to_nice_json }} 'in human-readable format'
{{ output | to_nice_yaml }}

----------------------------

'from_json/yaml' si aspettano stringhe rispettivamente in formato JSON o YAML.

{{ output | from_json }}
{{ output | from_yaml }}


-----------------------------


