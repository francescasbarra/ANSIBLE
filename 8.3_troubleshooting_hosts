# Troubleshooting Ansible Managed Hosts

Troubleshoot failures on managed hosts when running a playbook

# Troubleshooting Connections

Molti problemi sono associati alle connessioni con gli hosts e ai problemi di configurazione riguardo all'utente remoto e all'escalation dei provilegi

# Problems Authenticating to Managed Hosts

- assicurarsi che sia settato correttamente 'remote_user' nel file di configurazione o nel play, che combacino e siano gli user desiderati altrimenti fallisce il playbook

- 'permission denied': un altro motivo di fail può essere dovuto alle impostazioni non corrette delle chiavi ssh o password errate

es.
TASK [Gathering Facts] *********************************************************
fatal: [host.lab.example.com]: UNREACHABLE! => {"changed": false, "msg": "Failed to connect to the host via ssh: root@host: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).", "unreachable": true}

in questo caso il playbook tenta di connettersi all host come utente root ma la chiave ssh per l utente root sul controlnode non è stato aggiunto al file 'authorized_keys' per l'utente root sull host
(credenziali di autenticazione mancanti o errate)

----------------

# Problems with Name or Address Resolution
You can set a host inventory variable, 'ansible_host', that overrides the inventory name with a different name or IP address and be used by Ansible to connect to that host. This variable could be set in the host_vars file or directory for that host, or could be set in the inventory file itself.

For example, the following inventory entry configures Ansible to connect to 192.0.2.4 when processing the web4.phx.example.com host:

web4.phx.example.com ansible_host=192.0.2.4

------------------

# Problems with Privilege Escalation
se il playbook si connette come 'remote_user' e poi usa privilege escalation per diventare root o altro utente
assicurarsi che 'become' sia impostato correttamente e che ci sia il valore corretto per 'become_user'
(DI DEFAULT BECOME_USER è impostato su ROOT)


se l'utente remoto deve fornire la password sudo è necessario fornire la corretta pw sull'host

TASK [Gathering Facts] *********************************************************
fatal: [host]: FAILED! => {"msg": "Missing sudo password"}

In the preceding example, the playbook is attempting to run sudo on the host machine but it fails. The remote_user is not set up to run sudo commands without a password on the host machine. Either sudo on the host machine is not properly configured, or it is supposed to require a sudo password and you neglected to provide one when running the playbook.

Important
Normally, ansible-navigator runs as root inside its automation execution environment. However, the root user in the container has access to SSH keys provided by the user that ran ansible-navigator on the workstation. 
--------------

# Problems with Python on Managed Hosts

Ansible necessita che sugli hosts ci sia un interprete Python

TASK [Gathering Facts] *********************************************************
.............'["No python interpreters found for host......'


----------

# Using Check Mode as a Testing Tool

ansible-navigator run --check
ansible-navigator run -m stdout playbook.yml --check


questa opzione esegue il playbook sugli hosts ma senza apportare modifiche ('dry-run')

vengono visualizzate le eventuali modifiche senza fare cambiamenti

in caso di 'condizioni' potrebbe non funzionare

'check_mode' true / false
se 'true' si forza l'esecuzione dei tasks in modalità check
se false , run normalmente 

tasks:
    - name: task always in check mode
      ansible.builtin.shell: uname -a
      check_mode: true

# questo task run sempre in check mode e non apporta cambiamenti
This can be useful because you can run most of a playbook normally and test individual tasks with check_mode: true

-----------------
important
A task can determine if the playbook is running in check mode by testing the value of the magic variable ansible_check_mode. This Boolean variable is set to true if the playbook is running in check mode.

------------------

Warning
Tasks that have check_mode: false set run even when the playbook is run with ansible-navigator run --check. Therefore, you cannot trust that the --check option makes no changes to managed hosts, without inspecting the playbook and any roles or tasks associated with it.

------------------

'--diff'
mostra i cambiamenti apportati sugli host. Se si usa con l'opzione --check i cambiamenti vengono visualizzati nell output del comando ma non realmente effettuati.

# ansible-navigator run -m stdout playbook.yml --check --diff

------------------

# Testing with Modules

alcuni moduli possono fornire ulteriori info sullo stato degli host e vengono usati per testare e risolvere i problemi

'ansible.builtin.uri' verifica che un RESTful API restituisca il contenuto richiesto

tasks:
    - ansible.builtin.uri:
        url: http://api.myapp.example.com
        return_content: true
      register: apiresponse

    - ansible.builtin.fail:
        msg: 'version was not provided'
      when: "'version' not in apiresponse.content"


---------------

'ansible.builtin.script'
esegue uno script sugli host e fallisce se il codice di ritorno è diverso da zero
lo script si deve trovare nel progetto ansible e deve essere trasferito ed eseguito sugli hosts

 tasks:
    - ansible.builtin.script: scripts/check_free_memory --min 2G

----------------------

'ansible.builtin.stat'
raccoglie facts in un file, simile al comando stat

È possibile utilizzarlo per registrare una variabile e quindi verificare se il file esiste o per ottenere altre informazioni sul file.

se il file non esiste non fallisce, ma la sua variabile registrata segnala 'false' per *['stat']['exists']

In this example, an application is still running if /var/run/app.lock exists, in which case the play should abort.

  tasks:
    - name: Check if /var/run/app.lock exists
      ansible.builtin.stat:
        path: /var/run/app.lock
      register: lock

    - name: Fail if the application is running
      ansible.builtin.fail:
      when: lock['stat']['exists']

--------------------

'ansible.builtin.assert'
è un'alternativa al modulo ansible.builtin.fail

supporta opzione 'that' che accetta un elenco di condizioni
- se una di esse è falsa il task fallisce

- opzioni 'success_msg' e 'fail_msg' per personalizzare il messaggio visualizzato in caso di successo/fallimento 


The following example repeats the preceding one, but uses ansible.builtin.assert instead of the ansible.builtin.fail module:

  tasks:
    - name: Check if /var/run/app.lock exists
      ansible.builtin.stat:
        path: /var/run/app.lock
      register: lock

    - name: Fail if the application is running
      ansible.builtin.assert:
        that:
          - not lock['stat']['exists']


--------------------------

# Running Ad Hoc Commands with Ansible

# Un comando ad hoc è un modo per eseguire rapidamente un singolo task Ansible, senza doverlo salvare per eseguirlo di nuovo in seguito. Si tratta di semplici operazioni online che possono essere eseguite senza dover scrivere un playbook.

- non vengono eseguiti all'interno dell execution environment
- vengono eseguiti utilizzando il software, i ruoli e le raccolte Ansible installati direttamente sulla workstation.

#  Per utilizzare i comandi ad hoc di Ansible Core 2.13, è necessario installare il pacchetto RPM ansible-core sulla workstation.

Important
The ansible-core RPM package provides only the modules in the ansible.builtin Ansible Content Collection. If you need modules from other collections, you need to install those on your workstation separately.













----------------------



# Use the ansible-navigator replay command to review play execution
