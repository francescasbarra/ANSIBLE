# MANAGING STORAGE

Partition storage devices, configure LVM, format partitions or logical volumes, mount file systems, and add swap spaces.


# Mounting Existing File Systems

The following example task mounts the NFS share available at 172.25.250.100:/share on the /nfsshare directory on the managed hosts.

'ansible.posix.mount' 

- name: Mount NFS share
  ansible.posix.mount:
    path: /nfsshare
    src: 172.25.250.100:/share
    fstype: nfs
    opts: defaults
    dump: '0'
    passno: '0'
    state: mounted


'path' specifica il percorso su cui montare il file system
'src' specifica il dispositivo (potrebbe essere un nome di dispositivo, un UUID o un volume NFS)
'state' supporta diversi valori 'present/absent','mounted/unmounted', 'remounted'


# Configuring Storage with the Storage System Role

Red Hat Ansible Automation Platform provides the 'redhat.rhel_system_roles.storage' system role to configure local storage devices on your managed hosts.

# It can manage file systems on unpartitioned block devices, and format and create logical volumes on LVM physical volumes based on unpartitioned block devices.


-------------------------------------

Important
The redhat.rhel_system_roles.storage role formally supports managing file systems and mount entries for two use cases:

# Unpartitioned devices (whole-device file systems)

# LVM on unpartitioned whole-device physical volumes

If you have other use cases, then you might need to use other modules and roles to implement them.


--------------------------------------

# Managing a File System on an Unpartitioned Device


Per creare un file system su un dispositivo a blocchi non partizionato con il ruolo redhat.rhel_system_roles.storage si deve definire la 
'variabile storage_volumes' che contiene una lista di storage devices da gestire

Parametri della var 'storage_volumes'
'name' nome del volume
'type' deve essere 'disk'
'disks' Deve essere un elenco di un solo elemento: il dispositivo a blocchi non partizionato
'mount_point' dir sulla quale viene montato il file system
'fstype' tipo di fs (xfs, ext4, swap)
'mount_options' Opzioni di montaggio personalizzate, come ro o rw


# The following example play creates an XFS file system on the /dev/vdg device, and mounts it on /opt/extra.


  name: Example of a simple storage device
  hosts: all

  roles:
    - name: redhat.rhel_system_roles.storage
     'storage_volumes:'
        - name: extra
          type: disk
          disks:
            - /dev/vdg
          fs_type: xfs
          mount_point: /opt/extra


-------------------------

# MANAGING LVM WITH THE STORAGE ROLEM

Per creare un 'LVM VOLUME GROUP' con il ruolo redhat.rhel_system_roles.storage si deve definire 
la var 'storage_pools' contiene una lista di pools (volume groups) da gestire

dizionario all'interno della variabile:
'name' nome del VOLUME GROUP
'type' deve essere 'lvm'
'disks' è l'elenco dei dispositivi a blocchi che il LV usa per l archiviazione
'volumes' lista dei LV nel Volume Group

# The following entry creates the volume group vg01 with the type key set to the value lvm. The volume group's physical volume is the /dev/vdb disk

# TO CREATE A VOLUME GROUP 

- name: Configure storage on webservers
  hosts: webservers

  roles:
    - name: redhat.rhel_system_roles.storage
     'storage_pools:'
        - name: vg01
          type: lvm
          disks:
            - /dev/vdb


------------

Important
The disks option only supports unpartitioned block devices for your LVM physical volumes.

------------

# TO CREATE A LOGICAL VOLUME

Per creare un LV popolare la var 'volumes', annidata sotto la var 'storage_pools' con un elenco di LV e relativi parametri
Ogni elemento nell elenco è un dizionario che rappresenta un singolo LV all'interno della var storage_pools

'name'
'size'
'mount_point'
'fs_type'
'state' present/absent


# The following example creates two logical volumes, named lvol01 and lvol02. The lvol01 logical volume is 128 MB in size, formatted with the xfs file system, and is mounted at /data. The lvol02 logical volume is 256 MB in size, formatted with the xfs file system, and is mounted at /backup.

'uguale alla creazione del VG + creazione LV'

---
- name: Configure storage on webservers
  hosts: webservers

  roles:
    - name: redhat.rhel_system_roles.storage
     'storage_pools:'
        - name: vg01
          type: lvm
          disks:
            - /dev/vdb
         'volumes:'
            - name: lvol01
              size: 128m
              mount_point: "/data"
              fs_type: xfs
              state: present
            - name: lvol02
              size: 256m
              mount_point: "/backup"
              fs_type: xfs
              state: present


# In the following example entry, if the lvol01 logical volume is already created with a size of 128 MB, then the logical volume and file system are enlarged to 256 MB, assuming that the space is available within the volume group.

'ESTENSIONE LV '

volumes:
            - name: lvol01
              size: 256m
              mount_point: "/data"
              fs_type: xfs
              state: present


---------------------

# CONFIGURING SWAP SPACE

Si può usare il role anche per creare LV formattati come 'swap space'
'Il ruolo crea il LV, il fs di tipo swap, aggiunge il volume di swap e abilita immediatamente la swap'

# The following playbook example creates the lvswap logical volume in the vgswap volume group, adds the swap volume to the /etc/fstab file, and enables the swap space.

- name: Configure a swap volume
  hosts: all

  roles:
    - name: redhat.rhel_system_roles.storage
     'storage_pools:'
        - name: vgswap
          type: lvm
          disks:
            - /dev/vdb
          volumes:
            - name: lvswap
              size: 512m
              fs_type: swap
              state: present


--------------------------------------------

# MANAGING PARTITIONS AND FILE SYSTEMS WITH TASKS

è possibile gestire partizioni e file systems senza usare system roles, ma i moduli utilizzati a questo scopo non sono supportati da Red Hat

---------
Warning attenzione a partizioni/formattazione fs con ansible, soprattutto con il modulo 'ansible.builtin.command', errori nel codice possono causare perdite di dati.
---------

# Managing Partitions

- Si può usare la collezione 'community.general' con il modulo 'community.general.parted', ma non è supportato da Red Hat ed è rischioso

- oppure 'ansible.builtin.command' per eseguire i comandi di partizionamento sugli host

# For example, the following task creates a GPT disk label and a /dev/sda1 partition on the /dev/sda storage device only if /dev/sda1 does not already exist:

- name: Ensure that /dev/sda1 exists
  ansible.builtin.command:
    cmd: parted --script mklabel gpt mkpart primary 1MiB 100%
    creates: /dev/sda1

This depends on the fact that if the /dev/sda1 partition exists, then a Linux system creates a /dev/sda1 device file for it automatically.

---------------------

# Managing File System

- Il modo + semplice per gestire il file system senza il system role è
il modulo 
'community.general.filesystem' (ma non è supportato)

- in alternativa 'ansible.builtin.command' 


---------------------


# ANSIBLE FACTS FOR STORAGE CONFIGURATION

'ansible.builtin.setup' I dati Ansible raccolti da ansible.builtin.setup contengono informazioni utili sui dispositivi di archiviazione sugli host gestiti.

# The following playbook gathers and displays the ansible_facts['devices'] fact for each managed host.

- name: Display storage facts
  hosts: all

  tasks:
    - name: Display device facts
      ansible.builtin.debug:
       'var: ansible_facts['devices']'


For example, you could find the size of /dev/sda1 from the following fact:
ansible_facts['devices']['sda']['partitions']['sda1']['size']

-------------

# Facts about Device Links



---------------

# Facts about Mounted File Systems

'ansible_facts['mounts']' fact provides information about the currently mounted devices on the managed host. 

The following playbook gathers and displays the ansible_facts['mounts'] fact for managed hosts.

---
- name: Gather mounts
  hosts: all

  tasks:
    - name: Display mounts facts
      ansible.builtin.debug:
        var: ansible_facts['mounts']



 












