# MANAGING USERS AND AUTHENTICATION

Manage Linux users and groups, configure SSH, and modify the Sudo configuration on managed hosts.

# THE USER MODULE

'ansible.builtin.user' per gestire e configurare user account sugli hosts

To create a user that can log in to the machine, you need to provide a hashed password for the password parameter


- name: Create devops_user if missing, make sure is member of correct groups
  ansible.builtin.user:
    name: devops_user 
    shell: /bin/bash 
    groups: sys_admins, developers 
    append: true


'groups + append' indica alla macchina di aggiungere all'utente quei gruppi supplementari
'se non è indicato append' i gruppi supplementari esistenti vengono sovrascritti da quelli indicati nel task
'group' per impostare il gruppo primario

-------------------

# Use the User Module to Generate an SSH Key

il modulo 'ansible.builtin.user' può essere usato per generare chiavi SSH se usati insieme al paramentro 'generate_ssh_key'

-'name: Create an SSH key for user1'
  ansible.builtin.user:
    name: user1
    generate_ssh_key: true 
    ssh_key_bits: 2048 
    ssh_key_file: .ssh/id_my_rsa 



'generate_ssh_key: true' specifica se generare la chiave, non sovrascrive chiave esistente a meno che non sia specificato il paramentro 'force' insime a true
'ssh_key_bits: 2048' imposta il numero dei bit nella nuova chiave
'ssh_key_file' specifica il nome del file per la # nuova chiave privata SSH (quella pubblica aggiunge '.pub' come suffisso)

----------------------

# THE GROUP MODULE

'ansible.builtin.group' per gestire i gruppi negli hosts

gli hosts devono disporre dei comandi groupadd, groupdel, groupmod forniti dal pacchetto'shadows-utils' (per gli host windows si usa il modulo 'win_group')

- name: Verify that the auditors group exists
  ansible.builtin.group:
    name: auditors 
    state: present

state=present/absent



---------------------------


# THE KNOWN HOSTS MODULE

'ansible.builtin.known hosts' gestisce le chiavi ssh degli hosts (aggiunge/rimuove)

Ciò garantisce che gli host possano stabilire automaticamente l autenticità delle connessioni SSH ad altri host, assicurando che agli utenti non venga richiesto di verificare la fingerprint SSH di un host remoto la prima volta che si connettono ad esso.


- name: Copy host keys to remote servers
  ansible.builtin.known_hosts:
    path: /etc/ssh/ssh_known_hosts 
    name: servera.lab.example.com 
    key: servera.lab.example.com,172.25.250.10 ssh-rsa ASDeararAIUHI324324


'path' specifica il percorso del file 'known_hosts' da modificare. Se il file non esiste, viene creato.
'name' specifica il nome dell'host da aggiungere o rimuovere. 
Il nome deve corrispondere al nome host o all'indirizzo IP della chiave da aggiungere.
'key' è la chiave SSH pubblica dell'host sotto forma di stringa in un formato specifico.


----------

The following example demonstrates how to use the 'lookup plug-in' to populate the key parameter from an existing file in the Ansible project:

- name: Copy host keys to remote servers
  ansible.builtin.known_hosts:
    path: /etc/ssh/ssh_known_hosts
    name: serverb
    key: "{{ lookup('ansible.builtin.file', 'pubkeys/serverb') }}"




'lookup' # è un plugin che serve per leggere dati da fuori (cioè da file, variabili esterne, comandi, ecc.) e usarli nei tuoi playbook.

key: "{{ lookup('ansible.builtin.file', 'pubkeys/serverb') }}"
# lookup('file', 'percorso') = leggi il contenuto del file e usalo come valore.

Significa: Leggi il contenuto del file pubkeys/serverb e mettilo qui come valore della chiave key."

In questo caso:
# Il modulo known_hosts sta aggiungendo una chiave pubblica SSH al file /etc/ssh/ssh_known_hosts sul server remoto.

La chiave viene presa da un file all’interno del progetto Ansible (nella cartella pubkeys).

lookup('ansible.builtin.file', ...) legge proprio il contenuto del file.

È utile quando hai già delle chiavi pubbliche salvate in file e vuoi copiarle automaticamente nei server remoti, senza scriverle a mano nel playbook.

lookup('file', 'percorso') = leggi il contenuto del file e usalo come valore.


-----------------


'ansible.builtin.slurp' per ottenere il contenuto delle chiavi degli hosts in formato Base64

...




------------------

# The Authorized Key Module

'ansible.posix.authorized_key' gestisce le chiavi autorizzate ssh degli utenti sugli host

L'esempio seguente mostra come utilizzare il modulo ansible.posix.authorized_key per aggiungere una chiave SSH a un host gestito:


- name: Set authorized key
  ansible.posix.authorized_key:
    user: user1 
    state: present 
    key: "{{ lookup('ansible.builtin.file', 'files/user1/id_rsa.pub') }}"


'user' specifica l'utente il cui file viene modificato
'key' specifica la chiave da aggiungere/rimuovere
'manage_dir' se c è questo parametro crea la 'dir ssh' nel caso non ci sia

--------------------


# CONFIGURAZIONE DELL'ACCESSO SUDO PER UTENTI E GRUPPI

# L'esempio seguente mostra come utilizzare il modulo ansible.builtin.lineinfile per fornire a un gruppo l'accesso sudo all'account root senza richiedere una password ai membri del gruppo:


- name: Modify sudo to allow the group01 group sudo without a password
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/group01 
    state: present 
    create: true 
    mode: 0440 
    line: "%group01 ALL=(ALL) NOPASSWD: ALL" 
    validate: /usr/sbin/visudo -cf %s 



'path' specifica il file da modificare nella directory /etc/sudoers.d/. 
# È buona norma abbinare il nome del file al nome dell'utente o del gruppo a cui si concede l'accesso. Questo rende più facile il riferimento futuro.

'create' specifica se il file deve essere creato nel caso in cui non esista
'line' specifica la riga da inserire nel file
'validate' specifica il comando da eseguire per verificare la correttezza del file. Quando il parametro validate è presente, il file viene creato in un percorso temporaneo e il comando fornito lo convalida. Se il comando validate ha esito positivo, il file temporaneo viene copiato nel percorso specificato nel parametro path e rimosso.

--------------------------


