# MANAGE COMPLEX PLAY AND PLAYBOOK

# Selecting Hosts with Host Patterns
'HOST PATTERNS'


'ELENCA TUTTI GLI HOSTS'
ansible --list all

hosts (6):
  servera
  serverb
  serverc
  serverd
  servere
  serverf

'ELENCA HOSTS PRESENTI NEL GRUPPO WEBSERVERS E RHEL' & (host presenti in entrambi i gruppi, con AND)
ansible --list 'webservers:&rhel'
hosts (2):
  servera
  serverc


'ELENCA HOSTS PRESENTI NEL GRUPPO  WEBSERVERS E FEDORA' &
ansible --list 'webservers:&fedora'
hosts (1):
  servere

'ELENCA HOSTS CHE FANNO PARTE DI WEBSERVERS MA NON DI FEDORA' !
ansible --list 'webservers:!fedora'
hosts (2):
  servera
  serverc

'ELENCA SIA GLI HOSTS DI WEBSERVERS CHE DI DBSERVER' : (elenca tutti gli host presenti nei 2 gruppi)

ansible --list 'webservers:dbservers'
hosts (6):
  servera
  serverb
  serverc
  serverd
  servere
  serverf


--------------------

# la chiave hosts: può contenere un elenco di inventory hosts

- name: Gather common properties of our systems
  hosts:
    - servera
    - serverb
    - webservers:&fedora
    - dbservers:!fedora
  gather_facts: true
  become: false

# in teoria si possono inserire gli hosts anche su una sola riga, ma è molto meno leggibile e quindi non consigliato

hosts: servera,serverb,serverc, ....

(senza spazio dopo la virgola)

--------------------

hosts: "{{ my_host | default('localhost'] }}"


-----------------

You can only use an IP address in a host pattern if it is explicitly listed in the inventory. If the IP address is not listed in the inventory, then you cannot use it to specify the host even if the IP address resolves to that host name in DNS.

------------------

# Matching Multiple Hosts with Wildcards (caratteri jolly come * )

hosts: '*'

important
Some characters that are used in host patterns also have meaning for the shell. If you are using any special wildcards or list characters in an Ansible Playbook, then you must put your host pattern in single quotes to ensure it is parsed correctly.

hosts: '!test1.example.com,development'


The asterisk character can also be used to match any managed hosts or groups that contain a particular substring.
hosts: '*.example.com'

hosts: '192.168.2.*'

hosts: 'datacenter*'

----------------------------

# LIST

hosts: labhost1.example.com,test2.example.com,192.168.2.2

hosts: lab,data*,192.168.2.2





---------------------

Note
The colon character (:) can be used instead of a comma. However, the comma is the preferred separator, especially when working with IPv6 addresses as managed host names. You might see the colon syntax in earlier examples.

--------------------

If an item in a list starts with an ampersand character (&), then hosts must match that item in order to match the host pattern. It operates similarly to a logical AND.

For example, based on our example inventory, the following host pattern matches machines in the lab group only if they are also in the datacenter1 group:

hosts: lab,&datacenter1

----------------------

You could also specify that machines in the datacenter1 group match only if they are in the lab group with the host patterns &lab,datacenter1 or datacenter1,&lab.

You can exclude hosts that match a pattern from a list by using the exclamation point or "bang" character (!) in front of the host pattern. This operates like a logical NOT.

This example matches all hosts defined in the datacenter group, except test2.example.com based on the example inventory:

hosts: datacenter,!test2.example.com

-----------------------

hosts: all,!datacenter1

----------------------


nel playbook 

hosts: db,&london

hosts: 'prod,172*,*lab*'

hosts: 's*'

hosts: '172.25.*'

hosts: '*.example.com, !*.lab.example.com'

----------------------

hosts: servera,serverb,serverc

oppure (maggiore leggibilità)

hosts:
  - servera
  - serverb
  - serverc

---------------------




