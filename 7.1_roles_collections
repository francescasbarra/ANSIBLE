# Simplifying Playbooks with Roles and Ansible Content Collections

'Role' è una struttura di directory che facilita la riusabilità del codice ansible

# Structuring Ansible Playbooks with Roles

ç I roles semplificano il riutilizzo generico del codice Ansible.
È possibile impacchettare tutte le attività, le variabili, i file, i template e le altre risorse necessarie per il provisioning (creazione e configurazione) dell infrastruttura o il deployment delle applicazioni in una struttura di directory standardizzata.
# È possibile copiare un ruolo da un progetto all altro copiando la directory, quindi richiamarlo all interno di un play.

('provisioning infrastructure', creazione e configurazione)

Un role ben scritto può accettare le variabili passate dal playbook e le variabili possono modificare il comportamento del role impostando tutti i nomi host, gli indirizzi IP, i nomi utente, i secrets o altri dettagli specifici.

# benefit dei roles 

ç raggruppano i contenuti, consentendo una facile condivisione del codice con altri.

ç possono definite gli elementi essenziali di un tipo di sistema, come un server web, un server di database o un repository Git.

ç rendono gestibili i progetti + grandi

ç possono essere sviluppati in parallelo da + utenti

----------------

Oltre ai ruoli che scriviamo, usiamo e riusiamo possiamo ottenere ruoli da altre fonti... 
- da pacchetti di distribuzione come 'Ansible Content Colelction' 
- si possono scaricare anche dall'hub di automazione Red Hat (hub privato di automazione)
- dal sito Ansible Galaxy della community

RH include dei ruoli nel pacchetto 'rhel-system-roles'

----------------

# Examining the Ansible Role Structure

# Un role Ansible è definito da una struttura standardizzata di sottodirectory e file.

# La directory di primo livello definisce il nome del ruolo stesso.

# I file sono organizzati in sottodirectory in base allo scopo di ciascuno nel ruolo, come tasks e handlers.

Le sottodirectory File e Template contengono file a cui fanno riferimento le attività in altri playbook e file di attività.

----------

'The following tree command displays the directory structure of the user.example role.'

[user@host roles]$ tree user.example
user.example/
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── README.md
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml



----------------------


role facilita la riusabilità del codice ansible attraverso le variabili dell'utente

# parametri - valori

role lavora sugli hosts, legge i valori che gli sono stati specificati 

----------------------

# SUBDIRECTORY ROLES

Important non tutti i roles hanno queste directory

# defaults
The 'main.yml' file in this directory contains the default values of role variables that can be overwritten when the role is used. 
These variables have 'low precedence' and are intended to be changed and customized in plays 

# files
This directory contains static files that are referenced by role tasks.

# handlers
The main.yml file in this directory contains the role's handler definitions.

# meta
The main.yml file in this directory contains information about the role, including author, license, platforms, and optional role dependencies.
(INFO SUL RUOLO)

# tasks
The main.yml file in this directory contains the role's task definitions.

# templates
This directory contains Jinja2 templates that are referenced by role tasks.

# tests
This directory can contain an inventory and test.yml playbook that can be used to test the role.

# vars
The main.yml file in this directory 'defines the role s variable values'. Often these variables are used for internal purposes within the role. 
These variables have 'high precedence and are not intended to be changed when used in a playbook'.


-----------------------------------

# Defining Variables and Defaults

'Role variables' vengono definite creando un file 'vars/main.yml' con coppie chiavi-valore nella gerarchia delle directory del ruolo
Hanno 'elevata precedenza' e non possono essere sovrascritte dalle var dell'inventory

{{ var_name }}

'Default variables' consentono di impostare valori predefiniti per le variabili che possono essere usate in un play per configurare un ruolo o personalizzarne il comportamento.
Vengono definite nel file 'default/main.yml'
'possono essere sovrascritte da qualsiasi altra variabile'
È possibile utilizzare le variabili predefinite per fornire al ruolo le informazioni necessarie per configurare o distribuire correttamente qualcosa.

Si può definire una var specifica in vars/main.yml o default/main.yml ma non in entrambi i file.
Usare le var di default quando possono essere sovrascritte

IMPORTANT i ruoli non dovrebbero contenere dati sensibili, password, ecc ma solo dati generici in quando sono riutilizzabili e condivisibili
I 'secret' vengono forniti ai ruoli in altri modi + sicuri, non direttamente nei ruoli, ma nei ruoli vengono viene si viene indirizzati al file Ansible Vault che contiene il segreto.

---------------------------

# USO DEI ROLES ANSIBLE NEI PLAY

2 MODI PRINCIPALI PER RICHIAMARE I ROLES NEI PLAY:

1) importare o includere come tasks nell'elenco dei tasks

2) creare una lista dei roles che esegue roles specifici prima che vengano eseguiti i task del play

# 1) IMPORTARE/INCLUDERE ROLES COME TASKS

moduli
'ansible.builtin.import_role'
'ansible.builtin.include_role'

- name: Run a role as a task
  hosts: remote.example.com
  tasks:
    - name: A normal task
      ansible.builtin.debug:
        msg: 'first task'
    - name: A task to import role2 here
      ansible.builtin.import_role:
        name: role2


--------------------

With the ansible.builtin.import_role module, Ansible treats the role as a static import and parses it during initial playbook processing.

In the preceding example, when the playbook is parsed:

If roles/role2/tasks/main.yml exists, Ansible adds the tasks in that file to the play.

If roles/role2/handlers/main.yml exists, Ansible adds the handlers in that file to the play.

If roles/role2/defaults/main.yml exists, Ansible adds the default variables in that file to the play.

If roles/role2/vars/main.yml exists, Ansible adds the variables in that file to the play (possibly overriding values from role default variables due to precedence).

--------------------

Important
Because ansible.builtin.import_role is processed when the playbook is parsed, the role's handlers, default variables, and role variables are all exposed to all the tasks and roles in the play, and can be accessed by tasks and roles that precede it in the play (even though the role has not run yet).

----------------------











 
