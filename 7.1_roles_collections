# Simplifying Playbooks with Roles and Ansible Content Collections

'Role' è una struttura di directory che facilita la riusabilità del codice ansible

# Structuring Ansible Playbooks with Roles

ç I roles semplificano il riutilizzo generico del codice Ansible.
È possibile impacchettare tutte le attività, le variabili, i file, i template e le altre risorse necessarie per il provisioning (creazione e configurazione) dell infrastruttura o il deployment delle applicazioni in una struttura di directory standardizzata.
# È possibile copiare un ruolo da un progetto all altro copiando la directory, quindi richiamarlo all interno di un play.

('provisioning infrastructure', creazione e configurazione)

Un role ben scritto può accettare le variabili passate dal playbook e le variabili possono modificare il comportamento del role impostando tutti i nomi host, gli indirizzi IP, i nomi utente, i secrets o altri dettagli specifici.

# benefit dei roles 

ç raggruppano i contenuti, consentendo una facile condivisione del codice con altri.

ç possono definite gli elementi essenziali di un tipo di sistema, come un server web, un server di database o un repository Git.

ç rendono gestibili i progetti + grandi

ç possono essere sviluppati in parallelo da + utenti

----------------

Oltre ai ruoli che scriviamo, usiamo e riusiamo possiamo ottenere ruoli da altre fonti... 
- da pacchetti di distribuzione come 'Ansible Content Colelction' 
- si possono scaricare anche dall'hub di automazione Red Hat (hub privato di automazione)
- dal sito Ansible Galaxy della community

RH include dei ruoli nel pacchetto 'rhel-system-roles'

----------------

# Examining the Ansible Role Structure

# Un role Ansible è definito da una struttura standardizzata di sottodirectory e file.

# La directory di primo livello definisce il nome del ruolo stesso.

# I file sono organizzati in sottodirectory in base allo scopo di ciascuno nel ruolo, come tasks e handlers.

Le sottodirectory File e Template contengono file a cui fanno riferimento le attività in altri playbook e file di attività.

----------

'The following tree command displays the directory structure of the user.example role.'

[user@host roles]$ tree user.example
user.example/
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── README.md
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml



----------------------


role facilita la riusabilità del codice ansible attraverso le variabili dell'utente

# parametri - valori

role lavora sugli hosts, legge i valori che gli sono stati specificati 

----------------------

# SUBDIRECTORY ROLES

# defaults
The 'main.yml' file in this directory contains the default values of role variables that can be overwritten when the role is used. 
These variables have 'low precedence' and are intended to be changed and customized in plays 

# files
This directory contains static files that are referenced by role tasks.

# handlers
The main.yml file in this directory contains the role's handler definitions.

# meta
The main.yml file in this directory contains information about the role, including author, license, platforms, and optional role dependencies.
(INFO SUL RUOLO)

# tasks
The main.yml file in this directory contains the role's task definitions.

# templates
This directory contains Jinja2 templates that are referenced by role tasks.

# tests
This directory can contain an inventory and test.yml playbook that can be used to test the role.

# vars
The main.yml file in this directory 'defines the role s variable values'. Often these variables are used for internal purposes within the role. 
These variables have 'high precedence and are not intended to be changed when used in a playbook'.



 
