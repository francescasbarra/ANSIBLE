# CREATING ROLES

PROCESSO DI CREAZIONE ROLES

1 - CREARE LA STRUTTURA DI DIRECTORY DEL ROLE
2 - DEFINIRE IL CONTENUTO DEL ROLE
3 - USARE IL ROLE NEL PLAYBOOK

# 1 - CREARE LA STRUTTURA DI DIRECTORY DEL ROLE

I roles si trovano in una directory 'roles' 
Ogni role ha una sua directory con la sua struttura di sottodirectory

[user@host ~]$ tree roles/
roles/
└── motd
    ├── defaults
    │   └── main.yml
    ├── files
    ├── handlers
    ├── meta
    │   └── main.yml
    ├── README.md
    ├── tasks
    │   └── main.yml
    └── templates
        └── motd.j2


file 'README.md'  fornisce una descrizione di base del ruolo, la documentazione, esempi di utilizzo e tutti i requisiti per i ruoli non Ansible.

Se una sottodirectory esiste ma è vuota, come "handlers" in questo esempio, viene ignorata. È possibile omettere del tutto la sottodirectory se il ruolo non utilizza una funzionalità. In questo esempio, la sottodirectory "vars" viene omessa.

---------------------------

# Creating a Role Skeleton


nella cartella 'roles'

P.S.
# nel file di config ansible.cfg
  roles_path= ./roles/

'ansible-galaxy' per gestire i roles e collections Ansible

'ansible-galaxy role init' per creare la struttura directory per un nuovo role

# ansible-galaxy role init nome_role

[user@host playbook-project]$ cd roles

[user@host roles]$ ansible-galaxy role init my_new_role
- Role my_new_role was created successfully

[user@host roles]$ ls my_new_role/
defaults  files  handlers  meta  README.md  tasks  templates  tests  vars

---------------------------

# Defining the Role Content

Una volta creata la struttura si passa al contenuto del role

un buon punto di partenza è il file 'nome_ruolo/tasks/main.yml' che contiene l'elenco principale dei tasks eseguiti dal role

'tasks/main.yml' gestisce il file '/etc/motd' sugli hosts









-----------------------------

# Recommended Practices for Role Content Development

I ruoli consentono di suddividere i playbook in più file, ottenendo codice riutilizzabile. 
Per massimizzare l'efficacia dei nuovi ruoli, si consiglia di implementare le seguenti procedure nello sviluppo dei ruoli:

ç mantenere ogni ruolo nel proprio repository di controllo. Ansible lavora bene con i repository basati su git

ç Creare e gestire i file 'README.md e meta/main.yml' per documentare lo scopo, autore e utilizzo del ruolo.

ç usare un role per ogni funzione/scopo

ç usa role spesso

....


------------------

# Changing a Role's Behavior with Variables

I roles che usano variabili sono + generici e possono essere usati in + contesti

# Il valore di qualsiasi variabile definita nella directory default di un ruolo viene sovrascritto se la variabile è definita:

- in un inventory file sia come variabile host che var group

- in un file YAML nelle dir group_vars o host_var

- come var annidata in vars: nel play

- come var quando si include in roles: nel play

----------------


The following example shows how to use the motd role with a different value for the system_owner role variable. The value specified, someone@host.example.com, replaces the variable reference when the role is applied to a managed host.

[user@host ~]$ cat use-motd-role.yml
---
- name: use motd role playbook
  hosts: remote.example.com
  remote_user: devops
  become: true
  vars:
    system_owner: someone@host.example.com
  roles:
    - role: motd


# When defined in this way, the system_owner variable replaces the value of the default variable of the same name
# Any variable definitions nested within the vars keyword do not replace the value of the same variable if defined in a role's vars directory.

------------------

# The value specified, someone@host.example.com, replaces the variable reference regardless of being defined in the role's vars or defaults directory.

[user@host ~]$ cat use-motd-role.yml
---
- name: use motd role playbook
  hosts: remote.example.com
  remote_user: devops
  become: true
  roles:
    - role: motd
      system_owner: someone@host.example.com


--------------------- 

# Fewer variables can override variables defined in a role's vars directory

# Fewer variables can override variables defined in a role's vars directory. Facts, variables loaded with include_vars, registered variables, and role parameters can override these variables. Inventory variables and play vars cannot. This behavior is important because it helps keep your play from accidentally changing the internal functioning of the role.

# Variables declared inline as role parameters have very high precedence; they can also override variables defined in a role's vars directory.

--------------------

# Defining Role Dependencies

'role dependencies' permettono di includere altri roles come dipendenze

le dipendenze sono definite nel file '/meta/main.yml'

---
dependencies:
  - role: apache
    port: 8080
  - role: postgres
    dbname: serverlist
    admin_user: felix


-------------------

important
di default se più ruoli dipendono da un ruolo e tale ruolo viene chiamato più volte da ruoli diversi nella riproduzione con gli stessi attributi, il ruolo viene eseguito solo la prima volta che appare. Questo comportamento può essere ignorato impostando la variabile allow_duplicates su yes nel file meta/main.yml del ruolo.

# MEGLIO EVITARE LE DIPENDENZE

 




-------------------



