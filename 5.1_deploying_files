# DEPLOYING FILES TO MANAGED HOSTS

Deploy, manage, and adjust files on hosts managed by Ansible.

# Modifying and Copying Files to Hosts

# MODULI FILE

#ANSIBLE.BUILTIN.
La maggior parte dei moduli usati per la gestione dei file linux sono forniti con ansible-core nella collection 'ansible.builtin' ed eseguono attività come creazione, modifica, copia, modifica permessi e altri attributi.


'blockinfile' Insert, update, or remove a block of multiline text surrounded by customizable marker lines.

'copy' Copy a file from the local or remote machine to a location on a managed host. Similar to the file module, the copy module can also set file attributes, including SELinux context.

'fetch (recupero)' This module works like the copy module, but in reverse. This module is used for fetching files from remote machines to the control node and storing them in a file tree, organized by host name.


'file' Set attributes such as permissions, ownership, SELinux contexts, and time stamps of regular files, symlinks, hard links, and directories. This module can also create or remove regular files, symlinks, hard links, and directories. 

'lineinfile' Ensure that a particular line is in a file, or replace an existing line using a back-reference regular expression. This module is primarily useful when you want to change a single line in a file.

'stat' Retrieve status information for a file, similar to the Linux stat command.

----------------

#ANSIBLE.POSIX.

'ansible.posix' collection, è incluso nell'execution environment, fornisce moduli aggiuntivi per la gestione dei file

'patch' Apply patches to files by using GNU patch.

'synchronize' A wrapper around the rsync command to simplify common tasks. The synchronize module is not intended to provide access to the full power of the rsync command, but does make the most common invocations easier to implement. You might still need to call the rsync command directly via the command module depending on your use case.

---------------

# Ensuring a File Exists on Managed Hosts

Use the 'ansible.builtin.file' module to touch a file on managed hosts. This works like the touch command, creating an empty file if it does not exist, and updating its modification time if it does exist. In this example, in addition to touching the file, Ansible ensures that the owning user, group, and permissions of the file are set to specific values.

es.

- name: Touch a file and set permissions
  ansible.builtin.file:
    path: /path/to/file
    owner: user1
    group: group1
    mode: 0640
    state: touch

----------------

# Modifying File Attributes

You can use the ansible.builtin.file module to ensure that a new or existing file has the correct permissions or SELinux type as well.

For example, the following file has retained the default SELinux context relative to a user's home directory, which is not the desired context.

[user@host ~]$ ls -Z samba_file
-rw-r--r--.  owner group unconfined_u:object_r:user_home_t:s0 samba_file

- name: SELinux type is set to samba_share_t
  ansible.builtin.file:
    path: /path/to/samba_file
    setype: samba_share_t


[user@host ~]$ ls -Z samba_file
-rw-r--r--.  owner group unconfined_u:object_r:samba_share_t:s0 samba_file

---------------

# Copying and Editing Files on Managed Hosts

In this example, the ansible.builtin.copy module is used to copy a file located in the Ansible working directory on the control node to selected managed hosts.

- name: Copy a file to managed hosts
  ansible.builtin.copy:
    src: file
    dest: /path/to/file


By default, this module assumes that force: true is set. 
That forces the module to overwrite the remote file if it exists but has different contents to the file being copied. 
If force: false is set, then it only copies the file to the managed host if it does not already exist.

-----------------

# To retrieve files from managed hosts use the ansible.builtin.fetch module. 
This could be used to retrieve a file such as an SSH public key from a reference system before distributing it to other managed hosts.

- name: Retrieve SSH key from reference host
  ansible.builtin.fetch:
    src: /home/{{ user }}/.ssh/id_rsa.pub
    dest: files/keys/{{ user }}.pub


# To ensure a specific single line of text exists in an existing file, use the lineinfile module:

- name: Add a line of text to a file
  ansible.builtin.lineinfile:
    path: /path/to/file
    line: 'Add this line to the file'
    state: present


# To add a block of text to an existing file, use the ansible.builtin.blockinfile module:

- name: Add additional lines to a file
  ansible.builtin.blockinfile:
    path: /path/to/file
    block: |
      First line in the additional block of text
      Second line in the additional block of text
    state: present

--------------

Note
When using the ansible.builtin.blockinfile module, commented block markers are inserted at the beginning and end of the block to ensure idempotency.

# BEGIN ANSIBLE MANAGED BLOCK
First line in the additional block of text
Second line in the additional block of text
# END ANSIBLE MANAGED BLOCK
You can use the marker parameter to the module to help ensure that the right comment character or text is being used for the file in question.

---------------

# Removing a File from Managed Hosts

'ansible.builtin.file' module with the 'state: absent' parameter
state: present or state: absent

- name: Make sure a file does not exist on managed hosts
  ansible.builtin.file:
    dest: /path/to/file
    state: absent

-----------

# Retrieving the Status of a File on Managed Hosts




