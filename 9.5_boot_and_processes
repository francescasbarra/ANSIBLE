# Managing the Boot Process and Scheduled Processes

Manage service startup, schedule processes with at, cron, and systemd, reboot managed hosts with reboot, and control the default boot target on managed hosts.


# SCHEDULING JOBS FOR FUTURE EXECUTION 

The 'at' command schedules jobs that run once at a specified time. 

'Crontab' schedules jobs to run on a recurring schedule

-------------------

# Scheduling Jobs That Run One Time

'at' command schedules jobs that run once at a specified time.

'ansible.posix.at' 

In the following example, the task shown uses at to schedule the userdel -r tempuser command to run in 20 minutes.

- name: Remove tempuser
  ansible.posix.at:
    command: userdel -r tempuser
    count: 20       
    units: minutes
    unique: true


'count' numero intero di unità a partire da ora in cui il processo deve essere eseguito
'units' specifica se il conteggio 'count' è misurato in minuti/ore/giorni/settimane

--------------------

# Scheduling Repeating Jobs with Cron

'Crontab' schedules jobs to run on a recurring schedule

'ansible.builtin.cron'

Opzioni:

'name' identifica il job, è obbligatorio
'job' comando da eseguire
'cron_file' Se impostato, crea un Cron job di sistema in cron_file. È necessario specificare l'utente e un orario. Se si utilizza un percorso relativo, il file viene creato in /etc/cron.d.


il seguente task esegue il job indicato ogni venerdì alle 16:00

- name: Schedule backups for my home directory
  ansible.builtin.cron:
    name: Backup my home directory
    user: testing
    job: /home/testing/bin/backup-home-dir
    minute: 0
    hour: 16
    weekday: 5


----------------------

In the following example, the task creates a system Cron job in the /etc/cron.d/flush_bolt file that runs a command as root to flush the Bolt cache every morning at 11:45.

- name: Schedule job to flush the Bolt cache
  ansible.builtin.cron:
    name: Flush Bolt cache
    cron_file: flush_bolt
    user: "root"
    minute: 45
    hour: 11
    job: "php ./app/nut cache:clear"


--------------------

Warning
Do not use cron_file to modify the /etc/crontab file. The file you specify must only be maintained by Ansible and should only contain the entry specified by the task.

--------------------

# Controlling Systemd Timer Units

'ansible.builtin.systemd' can be used to enable or disable existing systemd timer units that run recurring jobs (usually systemd service units that eventually exit).

The following example disables and stops the systemd timer that automatically populates the dnf package cache on Red Hat Enterprise Linux 9.


- name: Disable dnf makecache
  ansible.builtin.systemd:
    name: dnf-makecache.timer
    state: stopped
    enabled: false

---------------------

# MANAGING SERVICES

# two modules to manage services or reload daemons:


'ansible.builtin.service'


'ansible.builtin.systemd'

----


# ansible.builtin.service
 it provides a generic interface to the initialization system, it offers a basic set of options to start, stop, restart, and enable services and other daemons.


- name: Start and enable nginx
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true


# ansible.builtin.systemd
is designed to work with systemd only

- name: Start nginx
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true


----

# The next example reloads the httpd daemon, but before it does that it runs systemctl daemon-reload to reload the entire systemd configuration.

- name: Reload web server
  ansible.builtin.systemd:
    name: httpd
    state: reloaded
    daemon_reload: true

------------------------------


# SETTING THE DEFAULT BOOT TARGET
ansible.builtin.systemd non può impostare il target di default di boot

'ansible.builtin.command' 


- name: Change default systemd target
  hosts: all
  gather_facts: false

  vars:
    systemd_target: "multi-user.target"  #target desiderato

  tasks:
    - name: Get current systemd target
      ansible.builtin.command:
        cmd: systemctl get-default #mostra il target corrente
      changed_when: false #si tratta di raccolta info quindi non ci devono essere cambi di stato, l'attività non dovrebbe mai segnalare modifiche
      register: target #var target contiene info raccolte

    - name: Set default systemd target
      ansible.builtin.command:
        cmd: systemctl set-default {{ systemd_target }} #imposta target desiderato
      when: systemd_target not in target['stdout'] # task ignorato se il target di default è già quello desiderato
      become: true # questo è l'unico task del play che richiede accesso come root


--------------------------

# REBOOTING MANAGED HOSTS

'ansible.builtin.reboot'  reboots the managed host, and waits until the managed host comes back up before continuing with playbook execution
The module determines that a managed host is back up by waiting until Ansible can run a command on the managed host.

The following simple example immediately triggers a reboot:

- name: Reboot now
  ansible.builtin.reboot:


# By default, the playbook waits up to 600 seconds before deciding that the reboot failed, and another 600 seconds before deciding that the test command failed. You can adjust this value so that the timeouts are each 180 seconds. For example:


- name: Reboot, shorten timeout
  ansible.builtin.reboot:
    reboot_timeout: 180


# Some other useful options to the module include:

'pre_reboot_delay' The time to wait before reboot. On Linux, this is measured in minutes, and if less than 60, is rounded down to 0.
'msg' The message to display to users before reboot.
'test_command' The command used to determine whether the managed host is usable and ready for more Ansible tasks after reboot. The default is 'whoami'.





